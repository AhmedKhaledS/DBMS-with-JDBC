package jdbc.imp.statement;

import java.sql.*;

public class DBStatement implements Statement {
    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return null;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return 0;
    }

    @Override
    public void close() throws SQLException {

    }

    @Override
    public final int getMaxFieldSize() throws SQLException {
        return 0;
    }

    @Override
    public final void setMaxFieldSize(int max) throws SQLException {

    }

    @Override
    public final int getMaxRows() throws SQLException {
        return 0;
    }

    @Override
    public final void setMaxRows(int max) throws SQLException {

    }

    @Override
    public final void setEscapeProcessing(boolean enable) throws SQLException {

    }

    @Override
    public final int getQueryTimeout() throws SQLException {
        return 0;
    }

    @Override
    public final void setQueryTimeout(int seconds) throws SQLException {

    }

    @Override
    public final void cancel() throws SQLException {

    }

    @Override
    public final SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public final void clearWarnings() throws SQLException {

    }

    @Override
    public final void setCursorName(String name) throws SQLException {

    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return false;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return null;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return 0;
    }

    @Override
    public final boolean getMoreResults() throws SQLException {
        return false;
    }

    @Override
    public final int getFetchDirection() throws SQLException {
        return 0;
    }

    @Override
    public final void setFetchDirection(int direction) throws SQLException {

    }

    @Override
    public final int getFetchSize() throws SQLException {
        return 0;
    }

    @Override
    public final void setFetchSize(int rows) throws SQLException {

    }

    @Override
    public final int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    @Override
    public final int getResultSetType() throws SQLException {
        return 0;
    }

    @Override
    public void addBatch(String sql) throws SQLException {

    }

    @Override
    public void clearBatch() throws SQLException {

    }

    @Override
    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return null;
    }

    @Override
    public final boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    @Override
    public final ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }

    @Override
    public final int executeUpdate(String sql, int autoGeneratedKeys) throws
            SQLException {
        return 0;
    }

    @Override
    public final int executeUpdate(String sql, int[] columnIndexes) throws
            SQLException {
        return 0;
    }

    @Override
    public final int executeUpdate(String sql, String[] columnNames) throws
            SQLException {
        return 0;
    }

    @Override
    public final boolean execute(String sql, int autoGeneratedKeys) throws
            SQLException {
        return false;
    }

    @Override
    public final boolean execute(String sql, int[] columnIndexes) throws
            SQLException {
        return false;
    }

    @Override
    public final boolean execute(String sql, String[] columnNames) throws
            SQLException {
        return false;
    }

    @Override
    public final int getResultSetHoldability() throws SQLException {
        return 0;
    }

    @Override
    public final boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public final boolean isPoolable() throws SQLException {
        return false;
    }

    @Override
    public final void setPoolable(boolean poolable) throws SQLException {

    }

    @Override
    public final void closeOnCompletion() throws SQLException {

    }

    @Override
    public final boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public final <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    @Override
    public final boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
