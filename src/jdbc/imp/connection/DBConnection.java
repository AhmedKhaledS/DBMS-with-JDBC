package jdbc.imp.connection;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class DBConnection implements Connection {

    @Override
    public Statement createStatement() throws SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql) throws SQLException {
        return null;
    }

    @Override
    public final CallableStatement prepareCall(String sql) throws SQLException {
        return null;
    }

    @Override
    public final String nativeSQL(String sql) throws SQLException {
        return null;
    }

    @Override
    public final boolean getAutoCommit() throws SQLException {
        return false;
    }

    @Override
    public final void setAutoCommit(boolean autoCommit) throws SQLException {

    }

    @Override
    public final void commit() throws SQLException {

    }

    @Override
    public final void rollback() throws SQLException {

    }

    @Override
    public void close() throws SQLException {

    }

    @Override
    public final boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public final DatabaseMetaData getMetaData() throws SQLException {
        return null;
    }

    @Override
    public final boolean isReadOnly() throws SQLException {
        return false;
    }

    @Override
    public final void setReadOnly(boolean readOnly) throws SQLException {

    }

    @Override
    public final String getCatalog() throws SQLException {
        return null;
    }

    @Override
    public final void setCatalog(String catalog) throws SQLException {

    }

    @Override
    public final int getTransactionIsolation() throws SQLException {
        return 0;
    }

    @Override
    public final void setTransactionIsolation(int level) throws SQLException {

    }

    @Override
    public final SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public final void clearWarnings() throws SQLException {

    }

    @Override
    public final Statement createStatement(int resultSetType, int
            resultSetConcurrency) throws SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency)
            throws SQLException {
        return null;
    }

    @Override
    public final CallableStatement prepareCall(String sql, int resultSetType, int
            resultSetConcurrency) throws SQLException {
        return null;
    }

    @Override
    public final Map<String, Class<?>> getTypeMap() throws SQLException {
        return null;
    }

    @Override
    public final void setTypeMap(Map<String, Class<?>> map) throws SQLException {

    }

    @Override
    public final int getHoldability() throws SQLException {
        return 0;
    }

    @Override
    public final void setHoldability(int holdability) throws SQLException {

    }

    @Override
    public final Savepoint setSavepoint() throws SQLException {
        return null;
    }

    @Override
    public final Savepoint setSavepoint(String name) throws SQLException {
        return null;
    }

    @Override
    public final void rollback(Savepoint savepoint) throws SQLException {

    }

    @Override
    public final void releaseSavepoint(Savepoint savepoint) throws SQLException {

    }

    @Override
    public final Statement createStatement(int resultSetType, int
            resultSetConcurrency, int resultSetHoldability) throws
            SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency, int
                                                          resultSetHoldability) throws SQLException {
        return null;
    }

    @Override
    public final CallableStatement prepareCall(String sql, int resultSetType, int
            resultSetConcurrency, int resultSetHoldability) throws
            SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql, int
            autoGeneratedKeys) throws SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql, int[]
            columnIndexes) throws SQLException {
        return null;
    }

    @Override
    public final PreparedStatement prepareStatement(String sql, String[]
            columnNames) throws SQLException {
        return null;
    }

    @Override
    public final Clob createClob() throws SQLException {
        return null;
    }

    @Override
    public final Blob createBlob() throws SQLException {
        return null;
    }

    @Override
    public final NClob createNClob() throws SQLException {
        return null;
    }

    @Override
    public final SQLXML createSQLXML() throws SQLException {
        return null;
    }

    @Override
    public final boolean isValid(int timeout) throws SQLException {
        return false;
    }

    @Override
    public final void setClientInfo(String name, String value) throws
            SQLClientInfoException {

    }

    @Override
    public final String getClientInfo(String name) throws SQLException {
        return null;
    }

    @Override
    public final Properties getClientInfo() throws SQLException {
        return null;
    }

    @Override
    public final void setClientInfo(Properties properties) throws
            SQLClientInfoException {

    }

    @Override
    public final Array createArrayOf(String typeName, Object[] elements) throws
            SQLException {
        return null;
    }

    @Override
    public final Struct createStruct(String typeName, Object[] attributes) throws
            SQLException {
        return null;
    }

    @Override
    public final String getSchema() throws SQLException {
        return null;
    }

    @Override
    public final void setSchema(String schema) throws SQLException {

    }

    @Override
    public final void abort(Executor executor) throws SQLException {

    }

    @Override
    public final void setNetworkTimeout(Executor executor, int milliseconds) throws
            SQLException {

    }

    @Override
    public final int getNetworkTimeout() throws SQLException {
        return 0;
    }

    @Override
    public final <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    @Override
    public final boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
